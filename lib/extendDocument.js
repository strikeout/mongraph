// Generated by CoffeeScript 1.6.2
var Join, processtools, _s;

_s = require('underscore.string');

processtools = require('./processtools');

Join = require('join');

module.exports = function(globalOptions) {
  var Document, functionName, graphdb, mongoose, node, _i, _len, _queryGraphDB, _ref;

  mongoose = globalOptions.mongoose;
  graphdb = globalOptions.neo4j;
  if (globalOptions.overrideProtoypeFunctions !== true) {
    _ref = ['applyGraphRelationships', 'removeNode', 'shortestPathTo', 'removeRelationships', 'removeRelationshipsBetween', 'removeRelationshipsFrom', 'removeRelationshipsTo', 'outgoingRelationships', 'incomingRelationships', 'allRelationships', 'queryRelationships', 'queryGraph', 'createRelationshipBetween', 'createRelationshipFrom', 'createRelationshipTo', 'getNodeId', 'findOrCreateCorrespondingNode', 'findCorrespondingNode'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      functionName = _ref[_i];
      if (typeof mongoose.Document.prototype[functionName] !== 'undefined') {
        throw new Error("Will not override mongoose::Document.prototype." + functionName);
      }
    }
  }
  Document = mongoose.Document;
  processtools.setMongoose(mongoose);
  node = graphdb.createNode();
  Document.prototype.queryRelationships = function(typeOfRelationship, options, cb) {
    var doc, id, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

    if (!this.schema.get('graphability')) {
      return cb(Error('No graphability enabled'), null);
    }
    _ref1 = processtools.sortTypeOfRelationshipAndOptionsAndCallback(typeOfRelationship, options, cb), typeOfRelationship = _ref1.typeOfRelationship, options = _ref1.options, cb = _ref1.cb;
    if (typeOfRelationship == null) {
      typeOfRelationship = '*';
    }
    typeOfRelationship = /^[*:]{1}$/.test(typeOfRelationship) || !typeOfRelationship ? '' : ':' + typeOfRelationship;
    if ((_ref2 = options.direction) == null) {
      options.direction = 'both';
    }
    if ((_ref3 = options.action) == null) {
      options.action = 'RETURN';
    }
    if ((_ref4 = options.limit) == null) {
      options.limit = '';
    }
    if ((_ref5 = options.order) == null) {
      options.order = '';
    }
    if (options.count || options.countDistinct) {
      if (options.countDistinct) {
        options.count = 'distinct ' + options.countDistinct;
      }
      options.returnStatement = 'count(' + options.count + ')';
      options.processPart = 'count(' + options.count + ')';
    }
    if ((_ref6 = options.processPart) == null) {
      options.processPart = 'r';
    }
    if ((_ref7 = options.returnStatement) == null) {
      options.returnStatement = options.processPart;
    }
    if ((_ref8 = options.referenceDocumentID) == null) {
      options.referenceDocumentID = this._id;
    }
    if ((_ref9 = options.endNodeId) == null) {
      options.endNodeId = '';
    }
    if (typeof endNode === 'object') {
      options.endNodeId = endNode.id;
    }
    if (options.debug === true) {
      options.debug = {};
    }
    doc = this;
    id = processtools.getObjectIDAsString(doc);
    return this.getNode(function(nodeErr, fromNode) {
      var cypher, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15;

      if (nodeErr) {
        return cb(nodeErr, null, options);
      }
      cypher = "START a = node(%(id)s)%(endNodeId)s\nMATCH (a)%(incoming)s[r%(relation)s]%(outgoing)s(b)\n%(whereRelationship)s\n%(action)s %(returnStatement)s\n%(limit)s %(order)s;";
      cypher = _s.sprintf(cypher, {
        id: fromNode.id,
        incoming: options.direction === 'incoming' ? '<-' : '-',
        outgoing: options.direction === 'outgoing' ? '->' : '-',
        relation: typeOfRelationship,
        action: options.action.toUpperCase(),
        limit: options.limit.toUpperCase(),
        order: options.order.toUpperCase(),
        returnStatement: options.returnStatement,
        whereRelationship: ((_ref10 = options.where) != null ? _ref10.relationship : void 0) ? "WHERE " + options.where.relationship : '',
        endNodeId: options.endNodeId ? ", b = node(" + options.endNodeId + ")" : ''
      });
      if ((_ref11 = options.startNode) == null) {
        options.startNode = fromNode.id;
      }
      if (options.cypher) {
        cypher = options.cypher;
      }
      if ((_ref12 = options.debug) != null) {
        if ((_ref13 = _ref12.cypher) == null) {
          _ref12.cypher = [];
        }
      }
      if ((_ref14 = options.debug) != null) {
        if ((_ref15 = _ref14.cypher) != null) {
          _ref15.push(cypher);
        }
      }
      if (options.dontExecute) {
        return cb(Error("`options.dontExecute` is set to true..."), null, options);
      } else {
        return _queryGraphDB(cypher, options, cb);
      }
    });
  };
  Document.prototype.findCorrespondingNode = function(options, cb) {
    var collectionName, doc, id, _processNode, _ref1, _ref2, _ref3, _ref4;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    if (!this.schema.get('graphability')) {
      return cb(Error('No graphability enabled'), null);
    }
    doc = this;
    if ((_ref2 = options.forceReload) == null) {
      options.forceReload = false;
    }
    if (globalOptions.cacheAttachedNodes && doc._cached_node && options.forceReload !== true) {
      return cb(null, doc._cached_node, options);
    }
    collectionName = doc.constructor.collection.name;
    id = processtools.getObjectIDAsString(doc);
    if ((_ref3 = options.doCreateIfNotExists) == null) {
      options.doCreateIfNotExists = false;
    }
    if ((_ref4 = options.forceCreation) == null) {
      options.forceCreation = false;
    }
    _processNode = function(node, doc, cb) {
      if (globalOptions.storeDocumentInGraphDatabase) {
        node.data = doc.toObject(globalOptions.storeDocumentInGraphDatabase);
        node.save();
      }
      doc._node_id = node.id;
      if (globalOptions.cacheAttachedNodes) {
        doc._cached_node = node;
      }
      return cb(null, node, options);
    };
    if (doc.isNew === true && options.forceCreation !== true) {
      return cb(new Error("Can't return a 'corresponding' node of an unpersisted document"), null, options);
    } else if (doc._node_id) {
      return graphdb.getNodeById(doc._node_id, function(errFound, node) {
        if (errFound) {
          return cb(errFound, node, options);
        } else {
          return _processNode(node, doc, cb);
        }
      });
    } else if (options.doCreateIfNotExists || options.forceCreation === true) {
      node = graphdb.createNode({
        _id: id,
        _collection: collectionName
      });
      return node.save(function(errSave, node) {
        if (errSave) {
          return cb(errSave, node, options);
        } else {
          node.index(collectionName, '_id', id);
          return _processNode(node, doc, cb);
        }
      });
    } else {
      return cb(null, null, options);
    }
  };
  Document.prototype.findOrCreateCorrespondingNode = function(options, cb) {
    var _ref1;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    return this.findCorrespondingNode(options, cb);
  };
  Document.prototype.getNode = Document.prototype.findOrCreateCorrespondingNode;
  Document.prototype.getNodeId = function(cb) {
    if (this._node_id) {
      return cb(null, this._node_id);
    } else {
      return this.getNode(function(err, node) {
        return cb(err, (node != null ? node.id : void 0) || null);
      });
    }
  };
  Document.prototype.createRelationshipTo = function(doc, typeOfRelationship, attributes, cb) {
    var _ref1, _ref2, _ref3, _ref4;

    if (attributes == null) {
      attributes = {};
    }
    _ref1 = processtools.sortAttributesAndCallback(attributes, cb), attributes = _ref1.attributes, cb = _ref1.cb;
    if (!this.schema.get('graphability')) {
      return cb(Error('No graphability enabled'), null);
    }
    if (typeof attributes === 'function') {
      cb = attributes;
      attributes = {};
    }
    if (globalOptions.relationships.storeIDsInRelationship) {
      if ((_ref2 = attributes._to) == null) {
        attributes._to = doc.constructor.collection.name + ":" + String(doc._id);
      }
      if ((_ref3 = attributes._from) == null) {
        attributes._from = this.constructor.collection.name + ":" + String(this._id);
      }
    }
    if (globalOptions.relationships.storeTimestamp) {
      if ((_ref4 = attributes._created_at) == null) {
        attributes._created_at = Math.floor(Date.now() / 1000);
      }
    }
    return this.findOrCreateCorrespondingNode(function(fromErr, from) {
      return doc.findOrCreateCorrespondingNode(function(toErr, to) {
        if (from && to) {
          return from.createRelationshipTo(to, typeOfRelationship, attributes, function(err, result) {
            if (err) {
              return cb(err, result);
            }
            return processtools.populateResultWithDocuments(result, {}, cb);
          });
        } else {
          if (typeof cb === 'function') {
            return cb(fromErr || toErr, null);
          }
        }
      });
    });
  };
  Document.prototype.createRelationshipFrom = function(doc, typeOfRelationship, attributes, cb) {
    var _ref1;

    if (attributes == null) {
      attributes = {};
    }
    _ref1 = processtools.sortAttributesAndCallback(attributes, cb), attributes = _ref1.attributes, cb = _ref1.cb;
    return doc.createRelationshipTo(this, typeOfRelationship, attributes, cb);
  };
  Document.prototype.createRelationshipBetween = function(doc, typeOfRelationship, attributes, cb) {
    var from, to, _ref1;

    if (attributes == null) {
      attributes = {};
    }
    _ref1 = processtools.sortAttributesAndCallback(attributes, cb), attributes = _ref1.attributes, cb = _ref1.cb;
    from = this;
    to = doc;
    return from.createRelationshipTo(to, typeOfRelationship, function(err1) {
      return to.createRelationshipTo(from, typeOfRelationship, function(err2) {
        return cb(err1 || err2, null);
      });
    });
  };
  Document.prototype.queryGraph = function(chypherQuery, options, cb) {
    var doc, _ref1;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    doc = this;
    return _queryGraphDB(chypherQuery, options, cb);
  };
  Document.prototype.allRelationships = function(typeOfRelationship, options, cb) {
    var _ref1;

    _ref1 = processtools.sortTypeOfRelationshipAndOptionsAndCallback(typeOfRelationship, options, cb), typeOfRelationship = _ref1.typeOfRelationship, options = _ref1.options, cb = _ref1.cb;
    options.direction = 'both';
    options.referenceDocumentID = this._id;
    return this.queryRelationships(typeOfRelationship, options, cb);
  };
  Document.prototype.incomingRelationships = function(typeOfRelationship, options, cb) {
    var _ref1;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    options.direction = 'incoming';
    options.referenceDocumentID = this._id;
    return this.queryRelationships(typeOfRelationship, options, cb);
  };
  Document.prototype.outgoingRelationships = function(typeOfRelationship, options, cb) {
    var _ref1;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    options.direction = 'outgoing';
    options.referenceDocumentID = this._id;
    return this.queryRelationships(typeOfRelationship, options, cb);
  };
  Document.prototype.removeRelationshipsTo = function(doc, typeOfRelationship, options, cb) {
    var from, _ref1, _ref2;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    if ((_ref2 = options.direction) == null) {
      options.direction = 'outgoing';
    }
    options.action = 'DELETE';
    from = this;
    return doc.getNode(function(nodeErr, endNode) {
      if (nodeErr) {
        return cb(nodeErr, endNode);
      }
      options.endNodeId = endNode.id;
      return from.queryRelationships(typeOfRelationship, options, cb);
    });
  };
  Document.prototype.removeRelationshipsFrom = function(doc, typeOfRelationship, options, cb) {
    var to;

    to = this;
    return doc.removeRelationshipsTo(to, typeOfRelationship, options, cb);
  };
  Document.prototype.removeRelationshipsBetween = function(doc, typeOfRelationship, options, cb) {
    var _ref1;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    options.direction = 'both';
    return this.removeRelationshipsTo(doc, typeOfRelationship, options, cb);
  };
  Document.prototype.removeRelationships = function(typeOfRelationship, options, cb) {
    var _ref1;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    options.direction = 'both';
    options.action = 'DELETE';
    return this.queryRelationships(typeOfRelationship, options, cb);
  };
  Document.prototype.removeNode = function(options, cb) {
    var doc, _ref1, _ref2;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    if (!this.schema.get('graphability')) {
      return cb(Error('No graphability enabled'), null);
    }
    if ((_ref2 = options.includeRelationships) == null) {
      options.includeRelationships = true;
    }
    doc = this;
    return doc.getNode(function(err, node) {
      var cypher;

      if (err || typeof node !== 'object') {
        if (typeof cb === 'function') {
          return cb(err || new Error('No corresponding node found to document #' + doc._id), node);
        }
      } else {
        cypher = "START n = node(" + node.id + ")\nMATCH n-[r?]-()\nDELETE n" + (options.includeRelationships ? ', r' : '');
        return _queryGraphDB(cypher, options, cb);
      }
    });
  };
  Document.prototype.shortestPathTo = function(doc, typeOfRelationship, options, cb) {
    var from, to, _ref1;

    if (typeOfRelationship == null) {
      typeOfRelationship = '';
    }
    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    if (!this.schema.get('graphability')) {
      return cb(Error('No graphability enabled'), null);
    }
    from = this;
    to = doc;
    return from.getNode(function(errFrom, fromNode) {
      return to.getNode(function(errTo, toNode) {
        var levelDeepness, query;

        if (errFrom || errTo || !fromNode || !toNode) {
          return cb(new Error("Problem(s) getting from and/or to node"));
        }
        levelDeepness = 15;
        query = "START a = node(" + fromNode.id + "), b = node(" + toNode.id + ")\nMATCH path = shortestPath( a-[" + (typeOfRelationship ? ':' + typeOfRelationship : '') + "*.." + levelDeepness + "]->b )\nRETURN path;";
        options.processPart = 'path';
        return from.queryGraph(query, options, cb);
      });
    });
  };
  Document.prototype.applyGraphRelationships = function(options, cb) {
    var doc, sortedRelationships, typeOfRelationship, _finally, _ref1, _ref2;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    if (!this.schema.get('graphability')) {
      return cb(Error('No graphability enabled'), null);
    }
    if ((_ref2 = options.doPersist) == null) {
      options.doPersist = false;
    }
    sortedRelationships = {};
    typeOfRelationship = '*';
    doc = this;
    _finally = function(err, result, options) {
      doc._relationships = sortedRelationships;
      if (typeof cb === 'function') {
        return cb(err, doc._relationships, options);
      }
    };
    return doc.getNode(options, function(err, node, options) {
      if (err) {
        return _finally(err, node, options);
      }
      return doc.allRelationships(typeOfRelationship, options, function(err, relationships, options) {
        var collectionName, conditions, data, key, part, relation, update, _id, _j, _k, _len1, _len2, _name, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

        if (err) {
          return _finally(err, relationships, options);
        }
        if ((relationships != null ? relationships.length : void 0) > 0) {
          for (_j = 0, _len1 = relationships.length; _j < _len1; _j++) {
            relation = relationships[_j];
            if ((_ref3 = relation._data) != null ? _ref3.type : void 0) {
              data = {};
              _ref4 = ['from', 'to'];
              for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
                part = _ref4[_k];
                _ref5 = processtools.extractCollectionAndId(relation.data["_" + part]), collectionName = _ref5.collectionName, _id = _ref5._id;
                data[part] = {
                  collection: collectionName,
                  _id: processtools.ObjectId(_id)
                };
              }
              if ((_ref6 = sortedRelationships[_name = relation._data.type]) == null) {
                sortedRelationships[_name] = [];
              }
              sortedRelationships[relation._data.type].push(data);
            }
          }
        }
        doc._relationships = sortedRelationships;
        if (typeOfRelationship === '*') {
          conditions = {
            _relationships: sortedRelationships
          };
          if (options.doPersist) {
            if (options != null) {
              if ((_ref7 = options.debug) != null) {
                _ref7.where.push(conditions);
              }
            }
            return doc.update(conditions, function(err, result) {
              return _finally(err, result, options);
            });
          } else {
            return _finally(err, null, options);
          }
        } else {
          key = '_relationships.' + typeOfRelationship;
          update = {};
          update[key] = sortedRelationships[typeOfRelationship];
          conditions = update;
          if (options != null) {
            if ((_ref8 = options.debug) != null) {
              _ref8.where.push(conditions);
            }
          }
          if (sortedRelationships[typeOfRelationship] != null) {
            return doc.update(conditions, function(err, result) {
              return _finally(err, result, options);
            });
          } else {
            update[key] = 1;
            conditions = {
              $unset: update
            };
            if (options.doPersist) {
              if (options != null) {
                if ((_ref9 = options.debug) != null) {
                  _ref9.where.push(conditions);
                }
              }
              return doc.update(conditions, function(err, result) {
                return _finally(err, result, options);
              });
            } else {
              return _finally(err, null, options);
            }
          }
        }
      });
    });
  };
  _queryGraphDB = function(cypher, options, cb) {
    var _ref1, _ref2;

    _ref1 = processtools.sortOptionsAndCallback(options, cb), options = _ref1.options, cb = _ref1.cb;
    if ((options.processPart == null) && ((_ref2 = cypher.trim().match(/(RETURN|DELETE)\s+([a-zA-Z]+?)[;]*$/)) != null ? _ref2[2] : void 0)) {
      options.processPart = cypher.trim().match(/(RETURN|DELETE)\s+([a-zA-Z]+?)[;]*$/)[2];
    }
    return graphdb.query(cypher, null, function(errGraph, map) {
      var data, result, _ref3, _ref4, _ref5, _ref6, _ref7;

      if (options.debug === true) {
        options.debug = {};
      }
      if ((_ref3 = options.debug) != null) {
        if ((_ref4 = _ref3.cypher) == null) {
          _ref3.cypher = [];
        }
      }
      if ((_ref5 = options.debug) != null) {
        if ((_ref6 = _ref5.cypher) != null) {
          _ref6.push(cypher);
        }
      }
      if ((_ref7 = options.loadDocuments) == null) {
        options.loadDocuments = true;
      }
      if (options.loadDocuments && (map != null ? map.length : void 0) > 0) {
        data = (function() {
          var _j, _len1, _results;

          _results = [];
          for (_j = 0, _len1 = map.length; _j < _len1; _j++) {
            result = map[_j];
            if (options.processPart) {
              _results.push(result[options.processPart]);
            } else {
              _results.push(result[Object.keys(result)[0]]);
            }
          }
          return _results;
        })();
        if (processtools.constructorNameOf(data[0]) === 'Relationship') {
          return processtools.populateResultWithDocuments(data, options, cb);
        } else {
          return processtools.populateResultWithDocuments(data, options, cb);
        }
      } else {
        if (typeof cb === 'function') {
          return cb(errGraph, map || null, options);
        }
      }
    });
  };
  if (globalOptions.cacheAttachedNodes) {
    return Document.prototype._cached_node = null;
  }
};
